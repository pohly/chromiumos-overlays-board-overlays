# Copyright (c) 2013 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

description     "Initialize RF led handler service"
author          "chromium-os-dev@chromium.org"

start on started system-services
respawn

env RF_LED_GPIO_NUMBER="197"
env RF_LED_GPIO_PATH="/sys/class/gpio/gpio197"

pre-start script

  if [ ! -d "${RF_LED_GPIO_PATH}" ] ; then
    echo ${RF_LED_GPIO_NUMBER} > /sys/class/gpio/export
    echo out > "${RF_LED_GPIO_PATH}/direction"
  fi
end script

script
  # This script uses dbus-monitor to track flimflam device and bluez adapter
  # states. dbus-monitor output is being filtered for power change events. Once
  # the power change is detected, dbus-send if used to get the power status. If
  # either or both WLAN/BT adapters are on, RF led is turned on. Otherwise RF
  # led is turned off.

  # dbus flimflam constants
  FLIMFLAM_SVC="org.chromium.flimflam"
  FLIMFLAM_INTF_DEVICE="org.chromium.flimflam.Device"
  WIFI_DEVICE="/device/wlan0"

  # dbus bluez constants
  BLUEZ_SVC="org.bluez"
  BLUEZ_INTF_ADAPTER="org.bluez.Adapter1"
  DBUS_INTF_PROPS="org.freedesktop.DBus.Properties"
  DBUS_INTF_MANAGER="org.freedesktop.DBus.ObjectManager"

  # dbus command used to retrieve target's state
  DBUS_SEND="dbus-send --system --print-reply --fixed"

  # filters used to find target's power state
  FILTER1="grep --line-buffered Powered"
  FILTER2="grep --line-buffered -o -E \'|true|false\'"
  FILTER3="grep -A 1 --line-buffered Powered"
  FILTER4="grep --line-buffered ${BLUEZ_INTF_ADAPTER}"
  FILTER5="grep --line-buffered -o true"

  # path to the gpio that controls rf led
  RF_LED_VALUE="${RF_LED_GPIO_PATH}/value"

  # this function updates rf led status after querying wifi and BT power states
  update_rf_led_state() {

    # querying bluez device properties
    BLUETOOTH_STATE="${DBUS_SEND} --dest=${BLUEZ_SVC} / \
                     ${DBUS_INTF_MANAGER}.GetManagedObjects"

    # querying flimflam device properties
    WIFI_STATE="${DBUS_SEND} --dest=${FLIMFLAM_SVC} ${WIFI_DEVICE} \
                ${FLIMFLAM_INTF_DEVICE}.GetProperties"

    # querying wifi and BT power states
    WIFI_STATUS=$(${WIFI_STATE} | ${FILTER1} | ${FILTER2})
    BLUETOOTH_STATUS=$(${BLUETOOTH_STATE} | ${FILTER4} | ${FILTER1} \
                       | ${FILTER5} || echo false)

    # logic "OR" operation for turning on rf led
    if [ "$WIFI_STATUS" = "false" -a "$BLUETOOTH_STATUS" = "false" ] ; then
      echo 0 > ${RF_LED_VALUE}
    else
      echo 1 > ${RF_LED_VALUE}
    fi
  }

  # updating rf led state on initialization
  update_rf_led_state

  # monitoring wifi and BT. Filters narrow down to power events only
  dbus-monitor --system "type='signal',sender='${FLIMFLAM_SVC}',
               interface='${FLIMFLAM_INTF_DEVICE}'" "type='signal',
               sender='${BLUEZ_SVC}',interface='${DBUS_INTF_PROPS}'" |
               ${FILTER3} | ${FILTER2} |
  while read UNUSED_EVENT ; do
    # Wifi or BT power related event! Updating RF led state

    logger -t $UPSTART_JOB "BT/WIFI power state changed. Updating RF led."
    update_rf_led_state &
  done
end script
