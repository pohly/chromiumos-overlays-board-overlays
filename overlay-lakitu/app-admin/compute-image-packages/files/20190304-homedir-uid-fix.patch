From 4e899c84387e932c0df858d671f5e7e78851c728 Mon Sep 17 00:00:00 2001
From: vaibhavrustagi <vaibhavrustagi@google.com>
Date: Thu, 7 Mar 2019 12:26:56 -0800
Subject: [PATCH] When creating users try to derive the UID/GID from the
 homedir

It's possible that when a new user is being created that the home
directory for that user already exists. When this happens account
manager will now try to find the UID of the user from that directory
and reuse it.

This fixes potential problems if for some reason the new accounts that
were previously added into passwd/group were not preserved after reboot,
but the correspondinghome directory was.
---
 packages/python-google-compute-engine/google_compute_engine/accounts/accounts_utils.py                | 38 ++++++++++++++++---
 1 file changed, 33 insertions(+), 5 deletions(-)

diff --git a/packages/python-google-compute-engine/google_compute_engine/accounts/accounts_utils.py b/packages/python-google-compute-engine/google_compute_engine/accounts/accounts_utils.py
index 56732c5..bb0ea31 100644
--- a/packages/python-google-compute-engine/google_compute_engine/accounts/accounts_utils.py
+++ b/packages/python-google-compute-engine/google_compute_engine/accounts/accounts_utils.py
@@ -30,7 +30,7 @@ USER_REGEX = re.compile(r'\A[A-Za-z0-9._][A-Za-z0-9._-]{0,31}\Z')
 DEFAULT_GPASSWD_ADD_CMD = 'gpasswd -a {user} {group}'
 DEFAULT_GPASSWD_REMOVE_CMD = 'gpasswd -d {user} {group}'
 DEFAULT_GROUPADD_CMD = 'groupadd {group}'
-DEFAULT_USERADD_CMD = 'useradd -m -s /bin/bash -p * {user}'
+DEFAULT_USERADD_CMD = 'useradd -s /bin/bash -p * {user}'
 DEFAULT_USERDEL_CMD = 'userdel -r {user}'
 DEFAULT_USERMOD_CMD = 'usermod -G {groups} {user}'
 
@@ -127,18 +127,28 @@ class AccountsUtils(object):
     except KeyError:
       return None
 
-  def _AddUser(self, user):
+  def _AddUser(self, user, uid=None, homedir=None):
     """Configure a Linux user account.
 
     Args:
       user: string, the name of the Linux user account to create.
+      uid: string, derived from 'new' user's home directory
+      homedir: string, home directory for 'new' user
 
     Returns:
       bool, True if user creation succeeded.
     """
     self.logger.info('Creating a new user account for %s.', user)
 
-    command = self.useradd_cmd.format(user=user)
+    extra_flags = ''
+    if homedir:
+      extra_flags += ' -d %s' % homedir
+    else:
+      extra_flags += ' -m'
+    if uid:
+      extra_flags += ' -u %s' % str(uid)
+
+    command = self.useradd_cmd.format(user=user) + extra_flags
     try:
       subprocess.check_call(command.split(' '))
     except subprocess.CalledProcessError as e:
@@ -342,9 +352,27 @@ class AccountsUtils(object):
     if not self._GetUser(user):
       # User does not exist. Attempt to create the user and add them to the
       # appropriate user groups.
-      if not (self._AddUser(user)
-              and self._UpdateUserGroups(user, self.groups)):
+      user_created = False
+
+      # Check if the homedir already exists and if yes try to derive UID
+      # and GID from that directory.
+      homedir = '/home/%s' % user
+      if os.path.isdir(homedir):
+        stats = os.stat(homedir)
+        if stats.st_uid > 1000 and stats.st_gid == stats.st_uid:
+          self.logger.info('Using UID %d and homedir %s for account %s',
+                       stats.st_uid, homedir, user)
+
+          if not self._AddUser(user, uid=stats.st_uid, homedir=homedir):
+            return False
+          user_created = True
+
+      if not user_created and not self._AddUser(user):
         return False
+
+      if not self._UpdateUserGroups(user, self.groups):
+        return False
+
     # Add the user to the google sudoers group.
     if not self._UpdateSudoer(user, sudoer=True):
       return False
-- 
2.21.0.360.g471c308f928-goog

