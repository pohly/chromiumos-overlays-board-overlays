From e18eacdb3fdccb2ae2307cd26491a289091475f0 Mon Sep 17 00:00:00 2001
From: Ke Wu <mikewu@google.com>
Date: Wed, 23 Aug 2017 11:24:56 -0700
Subject: [PATCH] Add cos-experiment-disable-healthcheck option to dockerd

Add a new option 'cos-experiment-disable-healthcheck' to docker daemon
for users to disable healthcheck. The default value of the option is
false. If users set 'cos-experiment-disable-healthcheck=true' (through
dockerd command or config file) then docker daemon won't create containers
with Healthcheck no matter which image/create options.
---
 daemon/config.go |  3 +++
 daemon/create.go | 13 +++++++++++++
 daemon/daemon.go |  2 ++
 3 files changed, 18 insertions(+)

diff --git a/daemon/config.go b/daemon/config.go
index 7a69fe09f..1d1c5f0e4 100644
--- a/daemon/config.go
+++ b/daemon/config.go
@@ -101,6 +101,7 @@ type CommonConfig struct {
 	TrustKeyPath         string              `json:"-"`
 	CorsHeaders          string              `json:"api-cors-header,omitempty"`
 	EnableCors           bool                `json:"api-enable-cors,omitempty"`
+	DisableHealthcheck   bool                `json:"cos-experiment-disable-healthcheck,omitempty"`
 
 	// LiveRestoreEnabled determines whether we should keep containers
 	// alive upon daemon shutdown/start
@@ -195,6 +196,8 @@ func (config *Config) InstallCommonFlags(flags *pflag.FlagSet) {
 
 	flags.StringVar(&config.MetricsAddress, "metrics-addr", "", "Set default address and port to serve the metrics api on")
 
+	flags.BoolVar(&config.DisableHealthcheck, "cos-experiment-disable-healthcheck", false, "Disable Healthcheck")
+
 	config.MaxConcurrentDownloads = &maxConcurrentDownloads
 	config.MaxConcurrentUploads = &maxConcurrentUploads
 }
diff --git a/daemon/create.go b/daemon/create.go
index c71d14e5f..cdb33ef91 100644
--- a/daemon/create.go
+++ b/daemon/create.go
@@ -96,6 +96,10 @@ func (daemon *Daemon) create(params types.ContainerCreateConfig, managed bool) (
 		return nil, err
 	}
 
+	if err := daemon.checkHealthcheckConfig(params.Config); err != nil {
+		return nil, err
+	}
+
 	if container, err = daemon.newContainer(params.Name, params.Config, params.HostConfig, imgID, managed); err != nil {
 		return nil, err
 	}
@@ -257,6 +261,15 @@ func (daemon *Daemon) mergeAndVerifyConfig(config *containertypes.Config, img *i
 	return nil
 }
 
+// Checks whether users disable Healthcheck explicitly. If so, set healthcheck config to none.
+func (daemon *Daemon) checkHealthcheckConfig(config *containertypes.Config) error {
+	if daemon.healthcheckDisabled && config.Healthcheck != nil {
+		logrus.Debug("Disabling HEALTHCHECK because of daemon flag")
+		config.Healthcheck = nil
+	}
+	return nil
+}
+
 // Checks if the client set configurations for more than one network while creating a container
 // Also checks if the IPAMConfig is valid
 func (daemon *Daemon) verifyNetworkingConfig(nwConfig *networktypes.NetworkingConfig) error {
diff --git a/daemon/daemon.go b/daemon/daemon.go
index f1246127c..741ce2460 100644
--- a/daemon/daemon.go
+++ b/daemon/daemon.go
@@ -105,6 +105,7 @@ type Daemon struct {
 	defaultIsolation          containertypes.Isolation // Default isolation mode on Windows
 	clusterProvider           cluster.Provider
 	cluster                   Cluster
+	healthcheckDisabled       bool
 
 	seccompProfile     []byte
 	seccompProfilePath string
@@ -699,6 +700,7 @@ func NewDaemon(config *Config, registryService registry.Service, containerdRemot
 	d.nameIndex = registrar.NewRegistrar()
 	d.linkIndex = newLinkIndex()
 	d.containerdRemote = containerdRemote
+	d.healthcheckDisabled = config.DisableHealthcheck
 
 	go d.execCommandGC()
 
-- 
2.14.1.342.g6490525c54-goog

