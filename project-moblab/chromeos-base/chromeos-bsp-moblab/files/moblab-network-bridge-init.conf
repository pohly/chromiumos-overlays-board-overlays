# Copyright (c) 2014 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

description   "Configure network bridge and disable wlan0 for moblab"
author        "chromium-os-dev@chromium.org"

start on started network-services

script
  SERVER_ADDRESS=192.168.231.1
  SERVER_NETMASK=255.255.255.0
  DHCPD_IFACE='lxcbr0'
  SHILL_START_LOCK_PATH="/var/lock/shill-start.lock"
  INTERFACE_BUILTIN='built-in'
  INTERFACE_USB='USB'

  find_network_interfaces() {
    # Find the built-in and the USB network interfaces.
    EXT_IFACE=""
    USB_IFACE=""
    local node
    for node in "$@"; do
      case $(readlink -f /sys/class/net/$node) in
        */usb*)
            USB_IFACE=$node
        ;;
        */pci*)
            EXT_IFACE=$node
        ;;
      esac
    done
  }

  wait_for_interface() {
    # Check the interface existence for 5 mins after boot.
    # Taking one parameter as the interface name - either 'built-in' or 'USB'
    local reps=0
    while [ ${reps} -lt 300 ]; do
      find_network_interfaces eth0 eth1
      local intf
      case "$1" in
        ${INTERFACE_BUILTIN}) intf=${EXT_IFACE}
          ;;
        ${INTERFACE_USB}) intf=${USB_IFACE}
          ;;
       *) logger -t "${UPSTART_JOB}" "Illegal network interface $1"
          break
          ;;
      esac
      if [ -n "${intf}" ]; then
        logger -t "${UPSTART_JOB}" "Found $1 Ethernet interface ${intf}."
        break
      fi
      if [ $((reps % 30)) -eq 0 ]; then
        logger -t "${UPSTART_JOB}" "Waiting for $1 Ethernet connection(${reps} secs)"
      fi
      : $((reps += 1))
      sleep 1
    done
  }

  set_up_forwarding() {
    # Add delay after restart shill
    sleep 5

    # Configure NAT service. This needs to be done each time that shill
    # is restarted as the restart will re-run the iptables setup job
    # and thus wipe the below settings.
    logger -t "${UPSTART_JOB}" "Configuring NAT Service."
    iptables -t nat -A POSTROUTING -o ${EXT_IFACE} -j MASQUERADE
    iptables -A FORWARD -i ${EXT_IFACE} -o ${DHCPD_IFACE} -m state \
      --state RELATED,ESTABLISHED -j ACCEPT
    iptables -A FORWARD -i ${DHCPD_IFACE} -o ${EXT_IFACE} -j ACCEPT

    logger -t "${UPSTART_JOB}" "Enabling IP forwarding"
    echo 1 > /proc/sys/net/ipv4/ip_forward
    echo 0 > /proc/sys/net/bridge/bridge-nf-call-iptables
    echo 0 > /proc/sys/net/bridge/bridge-nf-call-ip6tables
  }

  lock_shill() {
    if [ -e "${SHILL_START_LOCK_PATH}" ]; then
      lock_holder=$(readlink "${SHILL_START_LOCK_PATH}")
      logger -t "${UPSTART_JOB}" "Warning: lock is held by $lock_holder; will retry"
    elif [ -L "${SHILL_START_LOCK_PATH}" ]; then
      logger -t "${UPSTART_JOB}" "Cleaning dangling shill lock held by dead process"
      rm -f "${SHILL_START_LOCK_PATH}"
    fi

    local timeout=30
    while [ "$timeout" -gt 0 ]; do
      ln -s /proc/$$ "${SHILL_START_LOCK_PATH}" && return 0
      # Failure: owner might still have the lock, so retry for a while
      sleep 1
      timeout=$((timeout - 1))
    done
    logger -t "${UPSTART_JOB}" "Error: could not grab shill restart lock after 30 seconds"
    exit 1
  }

  unlock_shill() {
    rm -f "${SHILL_START_LOCK_PATH}"
  }

  # Step 1 - make sure the built-in external interface exists.
  wait_for_interface ${INTERFACE_BUILTIN}
  if [ -z "${EXT_IFACE}" ]; then
    logger -t "${UPSTART_JOB}" "No built-in Ethernet on eth0 or eth1."
    exit 0
  fi

  # Step 2 - stop shill before creating the network bridge.
  logger -t "${UPSTART_JOB}" "stopping shill"
  lock_shill
  stop shill

  # Step3 - create and setup the network bridge.
  # Step 3.1 - bring up the network bridge and set forward delay to 0.
  logger -t "${UPSTART_JOB}" "Bringing up network bridge ${DHCPD_IFACE}"
  brctl addbr ${DHCPD_IFACE}
  brctl setfd ${DHCPD_IFACE} 0

  # Step 3.2 - configure server IP address with ${SERVER_ADDRESS}.
  logger -t "${UPSTART_JOB}" "setting server IP address to ${SERVER_ADDRESS}"
  ifconfig ${DHCPD_IFACE} ${SERVER_ADDRESS} netmask ${SERVER_NETMASK} up

  # Step 3.3 - start the dhcpd server on MobLab. It needs the DHCPD_IFACE
  # piped in because on stumpy_moblab this value is not static. See
  # moblab-network-init for more details.
  logger -t "${UPSTART_JOB}" "starting moblab-dhcpd-init"
  start moblab-dhcpd-init DHCPD_IFACE=${DHCPD_IFACE}

  # Step 4 - restart shill with the network bridge in blacklist
  # Disable shill against the bridge interface and wlan0.
  # Shill will automatically ignore the virtual ethernet (veth*) interfaces.
  BLACKLISTED_DEVICES=${DHCPD_IFACE},wlan0
  logger -t "${UPSTART_JOB}" "starting shill with ${BLACKLISTED_DEVICES} blacklisted"
  start shill BLACKLISTED_DEVICES=${BLACKLISTED_DEVICES}
  unlock_shill

  # Step 5 - set up routing between built-in external network interface and the bridge.
  set_up_forwarding

  # Step 6 - wait for USB dongle to be ready.
  wait_for_interface ${INTERFACE_USB}
  if [ -z "${USB_IFACE}" ]; then
    logger -t "${UPSTART_JOB}" "No USB Ethernet dongle found on eth0 and eth1 for 5 mins."
    exit 0
  fi

  # Step 7 - restarts shill with USB dongle interface in blacklist.
  # Disable shill against USB Ethernet dongle(either eth0 or eth1) and wlan0.
  logger -t "${UPSTART_JOB}" "stopping shill"
  lock_shill
  stop shill
  logger -t "${UPSTART_JOB}" "starting shill with ${BLACKLISTED_DEVICES} and ${USB_IFACE} blacklisted"
  start shill BLACKLISTED_DEVICES=${BLACKLISTED_DEVICES},${USB_IFACE}
  unlock_shill

  # Step 8 - finish setting  USB dongle interface into the bridge.
  brctl addif ${DHCPD_IFACE} ${USB_IFACE}

  logger -t "${UPSTART_JOB}" "Bringing up ${USB_IFACE}"
  ifconfig ${USB_IFACE} up

  # Set up the routing after shill restarts.
  set_up_forwarding
end script
